/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/yaamai/mutation/pkg/apis/myresource/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MyResourceLister helps list MyResources.
// All objects returned here must be treated as read-only.
type MyResourceLister interface {
	// List lists all MyResources in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.MyResource, err error)
	// MyResources returns an object that can list and get MyResources.
	MyResources(namespace string) MyResourceNamespaceLister
	MyResourceListerExpansion
}

// myResourceLister implements the MyResourceLister interface.
type myResourceLister struct {
	indexer cache.Indexer
}

// NewMyResourceLister returns a new MyResourceLister.
func NewMyResourceLister(indexer cache.Indexer) MyResourceLister {
	return &myResourceLister{indexer: indexer}
}

// List lists all MyResources in the indexer.
func (s *myResourceLister) List(selector labels.Selector) (ret []*v1.MyResource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MyResource))
	})
	return ret, err
}

// MyResources returns an object that can list and get MyResources.
func (s *myResourceLister) MyResources(namespace string) MyResourceNamespaceLister {
	return myResourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MyResourceNamespaceLister helps list and get MyResources.
// All objects returned here must be treated as read-only.
type MyResourceNamespaceLister interface {
	// List lists all MyResources in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.MyResource, err error)
	// Get retrieves the MyResource from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.MyResource, error)
	MyResourceNamespaceListerExpansion
}

// myResourceNamespaceLister implements the MyResourceNamespaceLister
// interface.
type myResourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MyResources in the indexer for a given namespace.
func (s myResourceNamespaceLister) List(selector labels.Selector) (ret []*v1.MyResource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MyResource))
	})
	return ret, err
}

// Get retrieves the MyResource from the indexer for a given namespace and name.
func (s myResourceNamespaceLister) Get(name string) (*v1.MyResource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("myresource"), name)
	}
	return obj.(*v1.MyResource), nil
}
